import cv2
from PIL import Image, ImageEnhance, ImageFilter
import numpy as np
from filterpy.kalman import MerweScaledSigmaPoints
from filterpy.kalman import UnscentedKalmanFilter
from numpy.random import randn
from math import sqrt, pow, pi, sin, cos, tan

def twoD_threeD(u, v):
    camera_matrix = np.array([[1.64332228e+03,0,5.44861838e+02],
                              [0,2.08744299e+03,2.35903083e+02],
                              [0,0,1]])
    rvec = np.array([[0.707, -0.707, 0],
                     [0.707, 0.707, 0],
                     [0, 0, 1]])

    tvec = a = np.array([0, -1, 0])

    # (R T, 0 1)矩阵
    Trans = np.hstack((rvec, [[tvec[0]], [tvec[1]], [tvec[2]]]))

    # 相机内参和相机外参 矩阵相乘
    temp = np.dot(camera_matrix, Trans)

    Pp = np.linalg.pinv(temp)

    # 点（u, v, 1) 对应代码里的 [605,341,1]
    p1 = np.array([u, v, 1], np.float)

    print("像素坐标系的点:", p1)

    X = np.dot(Pp, p1)

    print("X:", X)

    # 与Zc相除 得到世界坐标系的某一个点
    X1 = np.array(X[:3], np.float) / X[3]

    print("X1:", X1)

    return X1

def fx(x, dt):
    F = np.array([[1, 0, dt, 0, 0, 0, 0],
                  [0, 1, 0, dt, 0, 0, 0],
                  [0, 0, 1, 0, 0, 0, 0],
                  [0, 0, 0, 1, 0, 0, 0],
                  [0, 0, 0, 0, 1, 0, 0],
                  [0, 0, 0, 0, 0, 1, 0],
                  [0, 0, 0, 0, 0, 0, 1]], dtype=float)
    return np.dot(F, x)


def hx(x):
    u = x[2]
    v = x[3]
    phi = x[4]

    H = np.array([[1, 0, 0, 0, 0, 0, 0],
                  [0, 1, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 1, 0, 0],
                  [0, 0, u / sqrt(u * u + v * v), v / sqrt(u * u + v * v), 0, 0, 0],
                  [-cos(phi), sin(phi), 0, 0, 0, cos(phi), -sin(phi)],
                  [-sin(phi), -cos(phi), 0, 0, 0, sin(phi), cos(phi)]], dtype=float)
    return np.dot(H, x)

dt = 1.0
points = MerweScaledSigmaPoints(7, alpha=1, beta=2, kappa=-1)

kf = UnscentedKalmanFilter(dim_x=7, dim_z=6, dt=dt, fx=fx, hx=hx, points=points)
kf.x = np.array([0, 0, 0.3, 0, 1.5707963267949, 348974.6812,4405288.645])#Xv，Yv，Vx，Vy，φ，Xp，Yp
kf.P *= 1
# z_std = 0.1
kf.R = np.array([[0.0025, 0, 0, 0, 0, 0],
                 [0, 0.0025, 0, 0, 0, 0],
                 [0, 0, 1, 0, 0, 0],
                 [0, 0, 0, 0.01, 0, 0],
                 [0, 0, 0, 0, 0.09, 0],
                 [0, 0, 0, 0, 0, 0.09]])
kf.Q *= 0.01
#Xv，Yv，Vx，φ，V，Xvision，Yvision
zsl = [[348977.4061,4405286.837,1.5707963267949,0.3,0,0.169414277416526],
       [348974.5417,4405290.241,-1.32581766366803,0.3,-0.0608585041136305,0.304945699349746],
       [348974.6812,4405288.611,0.785398163397448,0.3,0.18257551234087,0.440477121282969],
       [348974.7381,4405286.576,1.10714871779409,0.3,0.30429252056812,0.576008543216189],
       [348973.5515,4405287.875,1.5707963267949,0.3,0.30429252056812,0.711539965149411],
       [348974.3328,4405289.782,1.5707963267949,0.3,0.30429252056812,0.847071387082632],
       [348975.6086,4405291.404,1.32581766366803,0.3,0.365151024681751,0.982602809015851],
       [348975.6146,4405291.708,1.5707963267949,0.3,0.365151024681751,1.11813423094907],
       [348975.6225,4405292.11,1.10714871779409,0.3,0.60858504113625,1.38919707481551],
       [348975.6314,4405292.561,1.32581766366803,0.3,0.669443545249861,1.52472849674874],
       [348975.6375,4405292.873,1.32581766366803,0.3,0.730302049363461,1.66025991868196],
       [348975.6396,4405292.981,1.10714871779409,0.3,0.85201905759066,1.79579134061518],
       [348975.621,4405292.035,1.10714871779409,0.3,0.97373606581796,1.9313227625484],
       [348975.6539,4405293.705,1.32581766366803,0.3,1.09545307404516,2.20238560641484],
       [348975.6619,4405294.113,1.32581766366803,0.3,1.15631157815886,2.33791702834806],
       [348975.6696,4405294.503,1.32581766366803,0.3,1.27802858638606,2.6089798722145],
       [348975.6224,4405292.107,1.5707963267949,0.3,1.27802858638606,2.74451129414772],
       [348975.6827,4405295.17,1.32581766366803,0.3,1.33888709049966,2.88004271608094],
       [348975.6888,4405295.479,1.32581766366803,0.3,1.39974559461336,3.01557413801416],
       [348975.6973,4405295.912,1.325817664,0.3,1.399745595,3.15110556],
       [348975.6958,4405295.836,1.570796327,0.3,1.399745595,3.286636982],
       [348975.7034,4405296.225,1.570796327,0.3,1.399745595,3.422168404],
       [348975.7052,4405296.315,1.107148718,0.3,1.521462603,3.557699826],
       [348975.7112,4405296.618,1.325817664,0.3,1.582321107,3.693231248],
       [348975.722,4405297.167,1.107148718,0.3,1.704038115,3.82876267],
       [348975.7281,4405297.476,1.249045772,0.3,1.947472132,4.235356935],
       [348975.7354,4405297.85,1.570796327,0.3,1.947472132,4.370888357],
       [348975.7448,4405298.33,	1.325817664,0.3,2.008330636,4.506419779],
       [348975.751,4405298.643,1.325817664,0.3,2.06918914,4.641951201],
       [348975.7589,4405299.044,-1.325817664,0.3,2.008330636,4.777482623],
       [348975.7668,4405299.448,-1.325817664,0.3,1.947472132,4.913014045],
       [348975.7807,4405300.153,-1.325817664,0.3,1.886613628,5.048545467],
       [348975.7511,4405298.649,1.325817664,0.3,1.947472132,5.184076889],
       [348975.7394,4405298.054,1.570796327,0.3,1.947472132,5.319608311],
       [348975.7478,4405298.479,1.107148718,0.3,2.06918914,5.455139733],
       [348975.7557,4405298.882,1.107148718,0.3,2.190906148,5.590671155],
       [348975.7639,4405299.3,1.107148718,0.3,2.312623156,5.726202577],
       [348975.7707,4405299.646,0.927295218,0.3,2.495198669,5.861733999],
       [348975.7751,4405299.869,1.325817664,0.3,2.556057173,5.997265421],
       [348975.7165,4405296.888,1.107148718,0.3,2.677774181,6.132796842],
       [348975.5822,4405290.062,1.325817664,0.3,2.738632685,6.268328264],
       [348975.8026,4405301.267,1.325817664,0.3,2.799491189,6.403859686],
       [348975.8079,4405301.535,1.325817664,0.3,2.860349693,6.539391108],
       [348975.8182,4405302.059,1.570796327,0.3,2.860349693,6.67492253],
       [348975.8258,4405302.444,1.570796327,0.3,2.860349693,6.810453952],
       [348975.8322,4405302.77,1.325817664,0.3,2.921208197,6.945985374],
       [348975.8348,4405302.904,0.588002604,0.3,3.286359222,7.081516796],
       [348975.8301,4405302.664,1.325817664,0.3,3.347217726,7.217048218],
       [348975.8398,4405303.156,1.325817664,0.3,3.40807623,7.35257964],
       [348975.8466,4405303.505,1.570796327,0.3,3.40807623,7.488111062],
       [348975.8443,4405303.384,-1.107148718,0.3,3.164642214,7.759173906],
       [348975.8497,4405303.662,-0.927295218,0.3,2.982066702,7.894705328],
       [348975.8567,4405304.016,-1.325817664,0.3,2.921208197,8.03023675],
       [348975.8625,4405304.31,1.325817664,0.3,2.982066702,8.165768171],
       [348975.8713,4405304.76,0.927295218,0.3,3.164642214,8.301299593],
       [348975.8776,4405305.081,0.785398163,0.3,3.651510247,8.572362437],
       [348975.7023,4405296.168,0.927295218,0.3,3.834085759,8.707893859],
       [348975.8695,4405304.666,1.570796327,0.3,3.834085759,8.843425281],
       [348975.776,4405299.912, 1.5707963267949, 0.3, 3.834086, 8.843425281]]
countX = 0
countY = 0
for z in zsl:
    #X1 = twoD_threeD(z[4], z[5])
    #Yv, Xv = getJW()
    # 利用 GPS 获取行驶角度值 "alpha"
    # 利用 Xp = Xv + X1[0] * cos (alpha) + X1[1] * sin (alpha)，Yp = Yv - X1[0] * sin (alpha) + X1[1] * cos (alpha) 来计算"视觉目标点"在"大地坐标系"中的坐标
    #zs = [Xv, Yv, alpha, 0.3, Xp, Yp]
    kf.predict()
    kf.update(z)
    print(z)
    print(format(kf.x[0],'.15f')," ,",format(kf.x[1],'.15f'))#,",",format(kf.x[2],'.15f'),",",format(kf.x[3],'.15f'),",",format(kf.x[4],'.15f'),",",format(kf.x[5],'.15f'),",",format(kf.x[6],'.15f'),"]")#, 'log-likelihood', kf.log_likelihood)
    print("误差：",kf.x[0] - z[0],kf.x[1] - z[1])
    countX += kf.x[0] - z[0]
    countY += kf.x[1] - z[1]
print(countX)
print(countY)
print(zsl.__len__())
print(countY / zsl.__len__())
print(countX / zsl.__len__())


















